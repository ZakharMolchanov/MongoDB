import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../api";
import AceEditor from "react-ace";
import "ace-builds/src-noconflict/mode-javascript";
import "ace-builds/src-noconflict/theme-github";
import "ace-builds/src-noconflict/ext-language_tools";
import ChatDrawer from "../components/ChatDrawer";
import { aiApi } from "../api.ai";
import { useAuth } from "../context/AuthContext";

export default function AssignmentDetail() {
  const { id } = useParams();
  const [assignment, setAssignment] = useState(null);
  const [code, setCode] = useState("db.collection.find({})");
  const [result, setResult] = useState(null);
  const [attempts, setAttempts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [aiLoading, setAiLoading] = useState(false);
  const [runLoading, setRunLoading] = useState(false);
  const [error, setError] = useState(null);  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫

  // —á–∞—Ç
  const [chatOpen, setChatOpen] = useState(false);
  const [aiReply, setAiReply] = useState("");
  const { token, user } = useAuth();

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    api
      .get(`/assignments/${id}`)
      .then((res) => setAssignment(res.data))
      .catch((err) => setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è"))
      .finally(() => setLoading(false));
    // load user's attempts for this assignment (history)
    loadAttempts();
  }, [id]);

  const loadAttempts = () => {
    api
      .get(`/assignments/${id}/attempts`)
      .then((res) => setAttempts(res.data || []))
      .catch(() => setAttempts([]));
  };

  const handleRun = async () => {
    setRunLoading(true);
    try {
      const res = await api.post(`/assignments/${id}/attempts`, { code });
      setResult(res.data);
      // refresh attempts after a run
      loadAttempts();
    } catch (err) {
      const emsg = err.response?.data?.error || err.message || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è";
      const err_text = err.response?.data?.error_text || err.response?.data?.details || null;
      setError(emsg);
      setResult({ error: emsg, error_text: err_text });
    } finally {
      setRunLoading(false);
    }
  };

  // –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
  const ctx = assignment
    ? {
        assignment_title: assignment.title,
        assignment_description: assignment.description || "",
        schema: assignment.schema || null,
        user_query: code || "",
        error_text: result?.error || null,
      }
    : null;

  const askHint = async () => {
    if (!ctx) return;
    setAiLoading(true);
    try {
      const res = await aiApi.hint(ctx);
  setAiReply(res.data.reply);
      setChatOpen(true);
    } catch (err) {
      setError(err.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏");
    }
    setAiLoading(false);
  };

  const askExplain = async () => {
    if (!ctx) return;
    setAiLoading(true);
    try {
      const res = await aiApi.explain(ctx);
  setAiReply(res.data.reply);
      setChatOpen(true);
    } catch (err) {
      setError(err.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è");
    }
    setAiLoading(false);
  };

  const askFix = async () => {
    if (!ctx) return;
    setAiLoading(true);
    try {
      const res = await aiApi.fixError(ctx);
  setAiReply(res.data.reply);
      setChatOpen(true);
    } catch (err) {
      setError(err.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
    }
    setAiLoading(false);
  };

  if (loading) return <div className="container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="container">
      {error && <div style={{ color: "red" }}>{error}</div>} {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ */}
      <h2>{assignment?.title}</h2>
      <p>{assignment?.description}</p>
      {assignment?.schema && assignment?.schema.required_method && (
        <div style={{ marginTop: 8, padding: 10, background: '#eef6ff', borderRadius: 6 }}>
          <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{assignment.schema.required_method}()</code> –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ.
        </div>
      )}

      <h3>–ù–∞–ø–∏—à–∏ MongoDB-–∑–∞–ø—Ä–æ—Å</h3>
      <AceEditor
        mode="javascript"
        theme="github"
        value={code}
        onChange={(v) => setCode(v)}
        name="mongo_editor"
        width="100%"
        height="200px"
        fontSize={14}
        showPrintMargin={false}
        showGutter={true}
        highlightActiveLine={true}
        setOptions={{
          enableBasicAutocompletion: true,
          enableLiveAutocompletion: true,
          enableSnippets: true,
        }}
      />

      <div style={{ display: "flex", gap: 8, marginTop: 12 }}>
        <button className="btn primary" onClick={handleRun} disabled={runLoading}>
          {runLoading ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å'}
        </button>
        <button className="btn ghost" onClick={askHint} disabled={!token || aiLoading}>
          {aiLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–¥—Å–∫–∞–∑–∫–∞'}
        </button>
        <button className="btn ghost" onClick={askFix} disabled={!token || !result?.error || aiLoading}>
          {aiLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–†–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É'}
        </button>
        <button className="btn" onClick={() => setChatOpen(true)} disabled={!token}>
          –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
        </button>
      </div>

      {!token && (
        <div style={{ marginTop: 12, padding: 10, background: "#fff7ed", borderRadius: 8 }}>
          –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ —á–∞—Ç–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. <a href="/login">–í–æ–π—Ç–∏</a>
        </div>
      )}

      {result && (
        <div className="card" style={{ marginTop: 20 }}>
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
          {result.error ? (
            <>
              <pre style={{ color: "red" }}>{result.error}</pre>
              {result.error_text && <pre style={{ color: "#880000" }}>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {result.error_text}</pre>}
            </>
          ) : (
            <>
              <p>
                <b>–¢–µ—Å—Ç—ã:</b> {result.passed ? "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" : "‚ùå –û—à–∏–±–∫–∏"}
              </p>
              {/* Per-test breakdown */}
              {Array.isArray(result.tests) && (
                <div style={{ marginBottom: 12 }}>
                  {result.tests.map((t) => (
                    <div key={t.test_id} style={{ padding: 8, border: '1px solid #eee', borderRadius: 6, marginBottom: 8 }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                        <div><b>Test {t.test_id}:</b> {t.description}</div>
                        <div>{t.passed ? '‚úÖ' : '‚ùå'}</div>
                      </div>
                      {!t.passed && (
                        <div style={{ marginTop: 8 }}>
                          {t.failure_reason && <div style={{ color: '#b91c1c' }}>–ü—Ä–∏—á–∏–Ω–∞: {t.failure_reason}</div>}
                          {t.expected_sample && (
                            <div style={{ marginTop: 6 }}>
                              <div style={{ fontSize: 12, color: '#666' }}>–û–∂–∏–¥–∞–µ—Ç—Å—è (–ø—Ä–∏–º–µ—Ä):</div>
                              <pre style={{ maxHeight: 120, overflow: 'auto' }}>{JSON.stringify(t.expected_sample, null, 2)}</pre>
                            </div>
                          )}

                          
                          {t.actual_sample && (
                            <div style={{ marginTop: 6 }}>
                              <div style={{ fontSize: 12, color: '#666' }}>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π (–ø—Ä–∏–º–µ—Ä):</div>
                              <pre style={{ maxHeight: 120, overflow: 'auto' }}>{JSON.stringify(t.actual_sample, null, 2)}</pre>
                            </div>
                          )}
                        </div>
                      )}

                          {/* attempts removed from per-test loop to render once at the bottom */}
                    </div>
                  ))}
                </div>
              )}

              <pre style={{ maxHeight: 300, overflow: "auto" }}>
                {JSON.stringify(result.result_sample || result, null, 2)}
              </pre>
              {result.error_text && <pre style={{ color: "#880000", marginTop: 8 }}>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {result.error_text}</pre>}
            </>
          )}
        </div>
      )}

      <div className="card" style={{ marginTop: 20 }}>
        <h3>üìÇ –°—Ö–µ–º–∞ –±–∞–∑—ã</h3>
        {assignment?.schema ? (
          (() => {
            const schemaObj = assignment.schema;
            const entries = Object.entries(schemaObj || {});
            const isCollSchema = entries.length > 0 && entries.every(([, v]) => Array.isArray(v));
            if (isCollSchema) {
              return entries.map(([coll, docs]) => (
                <div key={coll} style={{ marginBottom: "16px" }}>
                  <h4>{coll}</h4>
                  <table
                    style={{
                      width: "100%",
                      borderCollapse: "collapse",
                      marginBottom: "8px",
                    }}
                  >
                    <thead>
                      <tr>
                        <th
                          style={{
                            borderBottom: "1px solid #ddd",
                            textAlign: "left",
                            padding: "4px 8px",
                          }}
                        >
                          –ü–æ–ª–µ
                        </th>
                        <th
                          style={{
                            borderBottom: "1px solid #ddd",
                            textAlign: "left",
                            padding: "4px 8px",
                          }}
                        >
                          –ü—Ä–∏–º–µ—Ä—ã
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {Array.isArray(docs) && docs.length > 0 &&
                        Object.keys(docs[0] || {}).map((field) => (
                          <tr key={field}>
                            <td style={{ padding: "4px 8px" }}>{field}</td>
                            <td style={{ padding: "4px 8px", color: "#666" }}>
                              {docs
                                .map((d) => (d && d[field] !== undefined ? String(d[field]) : "‚Äî"))
                                .slice(0, 3)
                                .join(", ")}
                            </td>
                          </tr>
                        ))}
                    </tbody>
                  </table>
                </div>
              ));
            }
            // Fallback: render raw schema JSON if it's not a coll->docs mapping
            return <pre style={{ whiteSpace: 'pre-wrap' }}>{JSON.stringify(schemaObj, null, 2)}</pre>;
          })()
        ) : (
          <p>–°—Ö–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞</p>
        )}
      </div>
      {/* User attempts history: render once at the bottom, fetched from backend */}
      <div className="card" style={{ marginTop: 20 }}>
        <h3>–ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏</h3>
        {attempts.length === 0 ? (
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫</p>
        ) : (
          <div>
            {attempts.map((a) => (
              <div key={a.id || a.query_id} style={{ padding: 8, borderBottom: '1px solid #eee' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <div><b>{new Date(a.created_at).toLocaleString()}</b> ‚Äî {a.status}</div>
                  <div>{a.exec_ms ? `${a.exec_ms} ms` : ''} {a.result_count !== undefined ? ` ‚Äî ${a.result_count} rows` : ''}</div>
                </div>
                {a.error_message && <div style={{ color: '#b91c1c' }}>–û—à–∏–±–∫–∞: {a.error_message}</div>}
                <pre style={{ maxHeight: 120, overflow: 'auto' }}>{a.code}</pre>
              </div>
            ))}
          </div>
        )}
      </div>

      <ChatDrawer open={chatOpen} onClose={() => setChatOpen(false)} aiReply={aiReply} />
    </div>
  );
}
